<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.example.yanolja.main.mapper.MainMapper">
	<!-- hotel 테이블 전체 컬럼 -->
	<sql id="postColumns">
		hotel.hotelid,
		hotel.hotelname,
		hotel.hotelcall,
		hotel.notification,
		COALESCE((SELECT FORMAT((AVG(Kindness) +
		AVG(cleanliness) + AVG(convenience) +
		AVG(Loc_satisfy)) / 4, 1)
		FROM
		review
		WHERE review.hotelid = hotel.hotelid), 0) as rating,
		(SELECT
		COUNT(*)
		FROM review
		WHERE review.hotelid = hotel.hotelid) AS
		reviewcount,
		hotel.kindhotel,
		hotel.hotelcreate,
		hotel.hotelmodifed,
		hotel.status,
		(SELECT MIN(room.price)
		FROM room
		WHERE room.hotelid =
		hotel.hotelid) AS price,
		(select regionid
		from region_detail
		where
		region_detail_id =
		(SELECT location.region_detail_id
		FROM location
		WHERE
		location.hotelid =
		hotel.hotelid)) as regionid,
		(SELECT
		location.region_detail_id
		FROM location
		WHERE location.hotelid =
		hotel.hotelid) AS regiondetail,
		(SELECT location.roadloc
		FROM location
		WHERE location.hotelid =
		hotel.hotelid) AS roadloc,
		(select imgdata from
		image where image.hotelid = hotel.hotelid and Thumbnail = 1) as
		imgdata
	</sql>

	<sql id="GenerateDateRange">
		DELIMITER $$
		CREATE FUNCTION GenerateDateRange(startDate
		DATE, endDate DATE)
		RETURNS TEXT
		DETERMINISTIC
		NO SQL
		BEGIN
		DECLARE
		currentDate DATE;
		DECLARE dateRange TEXT DEFAULT '';
		SET currentDate =
		startDate;

		WHILE currentDate &lt;= endDate DO
		SET dateRange =
		CONCAT(dateRange, "'", currentDate, "',");
		SET currentDate =
		DATE_ADD(currentDate, INTERVAL 1 DAY);
		END WHILE;

		RETURN TRIM(TRAILING
		',' FROM dateRange);
		END$$

		DELIMITER ;
	</sql>

	<sql id="reviewColums">
		FORMAT((AVG(Kindness) + AVG(cleanliness) + AVG(convenience) +
		AVG(Loc_satisfy)) / 4, 1) AS rating,
		(select name from user where
		user.userid = review.userid) as username,
		(select roomname from room
		where room.roomid = review.roomid) as
		roomname,reviewcontent,ratingdate ,reviewid ,userid <!-- 원래 reviewid 대신 사진 들어가야 함 -->
	</sql>

	<select id="findRegionName">
		select regionName from region
	</select>

	<select id="findPostById">
		SELECT
		<include refid="postColumns" />
		FROM
		hotel
		WHERE kindhotel = '${kindhotel}' and hotel.hotelid IN (SELECT
		hotelid FROM location WHERE
		region_detail_id =
		(SELECT region_detail_id
		FROM location WHERE hotelid = #{hotelid}))
	</select>

	<!--호텔아이디 조회 -->
	<select id="findHotelId">
		SELECT
		hotelid
		FROM
		room
		WHERE
		roomid = #{roomid}
	</select>

	<!-- 호텔 조회 -->
	<select id="findAll">
		SELECT
		<include refid="postColumns" />
		FROM
		hotel
	</select>

	<!-- 호텔 조회 -->
	<select id="findAllFrom">
		SELECT
		<include refid="postColumns" />
		FROM hotel where (select regionid
		from region_detail
		where
		region_detail_id = (SELECT
		location.region_detail_id
		FROM
		location
		WHERE
		location.hotelid = hotel.hotelid)) = #{regionid} and
		kindhotel =
		#{kindhotel}
	</select>

	<!-- 호텔 조회 -->
	<select id="findAllFromRegion">
		SELECT
		<include refid="postColumns" />
		FROM hotel where (select regionName from region where regionid =
		(select regionid
		from region_detail
		where
		region_detail_id = (SELECT
		location.region_detail_id
		FROM
		location
		WHERE
		location.hotelid =
		hotel.hotelid))) like CONCAT(#{regionname},'%') and
		kindhotel =
		#{kindhotel}
	</select>

	<!-- 호텔 조회 -->
	<select id="findAllFromRd">
		SELECT
		<include refid="postColumns" />
		FROM hotel
		where (select
		region_detail_name
		from region_detail
		where
		region_detail_id =
		(SELECT
		region_detail_id
		FROM
		location
		WHERE
		location.hotelid =
		hotel.hotelid)) like
		CONCAT(#{regionname},'%') and
		kindhotel =
		#{kindhotel}
	</select>

	<!-- 호텔 조회 -->
	<select id="findAllFromRds">
		SELECT
		<include refid="postColumns" />
		FROM hotel
		WHERE
		<foreach collection="regionname" item="region" separator=" OR ">
			(SELECT region_detail_name FROM region_detail WHERE region_detail_id =
			(SELECT region_detail_id FROM location WHERE location.hotelid = hotel.hotelid))
			LIKE CONCAT(#{region}, '%')
		</foreach>
		AND kindhotel = #{kindhotel}
	</select>

	<!-- 호텔 조회 -->
	<select id="TofindByKind">
		SELECT
		<include refid="postColumns" />
		FROM hotel where
		kindhotel = #{kindhotel}
	</select>

	<!-- 호텔 조회 -->
	<select id="TofindByKindDesc">
		SELECT
		<include refid="postColumns" />
		FROM hotel where
		kindhotel = #{kindhotel}
		ORDER BY rating desc
	</select>

	<!-- 방 조회 -->

	<select id="lastReviewid">
		SELECT MAX(reviewid) AS lastreviewid FROM review;
	</select>

	<!-- 지역별 리스트 조회 -->
	<select id="findlocateby">
		SELECT
		<include refid="postColumns" />
		FROM
		hotel
		where
		(select regionid
		from region_detail
		where region_detail_id
		= (SELECT
		location.region_detail_id
		FROM
		location
		WHERE
		location.hotelid =
		hotel.hotelid)) = #{regionid}
	</select>

	<select id="reserve_possible2">
		SELECT DateList.reservedate,
		IFNULL(COUNT(Reservations.reservedate), 0) AS
		cnt
		FROM (
		SELECT
		DATE_ADD(CURDATE(), INTERVAL (n-1) DAY) AS reservedate
		FROM (
		SELECT a.N
		+ b.N * 10 + c.N * 100 AS n
		FROM (
		SELECT 0 AS N UNION ALL SELECT 1
		UNION ALL SELECT 2 UNION ALL SELECT 3 UNION
		ALL SELECT 4 UNION ALL
		SELECT 5 UNION ALL SELECT 6 UNION ALL SELECT 7 UNION ALL SELECT 8
		UNION ALL
		SELECT 9
		) AS a
		CROSS JOIN (
		SELECT 0 AS N UNION ALL SELECT 1
		UNION ALL SELECT 2 UNION ALL SELECT 3 UNION
		ALL SELECT 4 UNION ALL
		SELECT 5 UNION ALL SELECT 6 UNION ALL SELECT 7 UNION ALL SELECT 8
		UNION ALL
		SELECT 9
		) AS b
		CROSS JOIN (
		SELECT 0 AS N UNION ALL SELECT 1
		UNION ALL SELECT 2 UNION ALL SELECT 3 UNION
		ALL SELECT 4 UNION ALL
		SELECT 5 UNION ALL SELECT 6 UNION ALL SELECT 7 UNION ALL SELECT 8
		UNION ALL
		SELECT 9
		) AS c
		) AS numbers
		WHERE DATE_ADD(CURDATE(), INTERVAL
		(n-1) DAY) BETWEEN CURDATE() AND
		DATE_ADD(CURDATE(), INTERVAL 6 MONTH)
		) AS DateList
		LEFT JOIN reserve AS Reservations
		ON DateList.reservedate
		BETWEEN
		Reservations.reservedate AND
		Reservations.reserveEndDate
		WHERE
		Reservations.reservedate IS NOT NULL AND Reservations.hotelid =
		#{hotelid}
		GROUP BY DateList.reservedate;
	</select>

	<select id="selectForReview">
		SELECT
		(SELECT hotelname FROM hotel WHERE
		hotel.hotelid = room.hotelid) AS
		hotelname,
		rentalType,
		roomname,
		(select
		reservedate from reserve where order_number = #{order_number}) as
		reservedate
		FROM room
		WHERE roomid = #{roomid};
	</select>

	<insert id="insertReview">
		INSERT INTO review (roomid, hotelid,
		userid,
		reviewcontent, Kindness, cleanliness, convenience,
		Loc_satisfy,
		ratingdate)
		VALUE
		(#{roomid} , #{hotelid}, #{userid} , #{textData} ,
		#{rating1} , #{rating2} , #{rating3} , #{rating4} , Now())
	</insert>

	<update id="updateReivewYn">
		update book set reviewYN = true where bookid =
		#{bookid};
	</update>

	<insert id="saveImage">
		INSERT INTO image (hotelid,
		reviewid
		,imgname,imgdata,Thumbnail , userid)
		VALUE
		(#{hotelid},#{currentReviewid},#{originalFileName},#{imageBytes} ,0
		,#{userid})
	</insert>

	<insert id="saveImageTest">
		INSERT INTO image
		(hotelid,imgname,imgdata,Thumbnail,roomid)
		VALUE((select hotelid from
		room where roomid = #{roomid}),#{originalFileName},#{imageBytes} ,0,
		#{roomid})
	</insert>

	<update id="updateImage">
		INSERT INTO image (hotelid,
		reviewid
		,imgname,imgdata,Thumbnail , userid)
		VALUE
		(#{hotelid},#{currentReviewid},#{originalFileName},#{imageBytes} ,0
		,#{userid})
	</update>

	<delete id="DeleteReviewById">
		delete from review where reviewid = #{reviewid}
	</delete>

	<delete id="DeletePhotoById">
		delete from image where reviewid = #{reviewid}
	</delete>

	<select id="selectRsByreview">
		select roomid from review where reviewid =
		#{reviewid}
	</select>

	<select id="selectForReviewUpdate">
		SELECT
		h.hotelname,
		r.rentalType,
		ROUND((rv.Kindness +
		rv.cleanliness + rv.convenience + rv.Loc_satisfy) / 4, 1) AS
		totalrating,
		rv.Kindness,
		rv.cleanliness,
		rv.convenience,
		rv.Loc_satisfy,
		rv.reviewcontent,
		rm.roomname,
		userid
		FROM
		hotel h
		JOIN room r ON h.hotelid
		=
		r.hotelid
		JOIN review rv ON
		r.roomid = rv.roomid
		JOIN room rm ON
		r.roomid = rm.roomid
		WHERE
		rv.reviewid =
		#{roomIdbyReview}
	</select>

	<select id="ReviewInseredPhoto">
		select imgID ,imgname, imgdata from image
		where
		reviewid =
		#{reviewid}
	</select>

	<delete id="DelPhotoByimgid">
		delete from image where imgid= #{imgid}
	</delete>

	<update id="updateReview">
		Update review
		set
		reviewcontent = #{textData} ,
		Kindness=#{rating1} ,cleanliness= #{rating2} , convenience=#{rating3}
		, Loc_satisfy=#{rating4} where reviewid = #{reviewid}
	</update>

	<select id="isBooked">
		Select reviewYN from book where roomid=#{roomid} and
		bookid = #{bookid}
	</select>

	<select id="findRegionDetail">
		select region_detail_Name from region_detail
		where regionid in (select regionid from region where regionName like CONCAT( #{selectedText}, '%'))
	</select>
</mapper>